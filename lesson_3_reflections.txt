Q1. When would you want to use a remote repository rather than keeping all your work local?

A1. If there is someone else on the team that is working on the code, obviously it would be easier for them to push to a cloud-based service like GitHub, rather than to someone's local machine.

Q2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A2. I think it is better to do this manually, as I can check on GitHub and decide if it is time to pull or not, based on the commit comments on GitHub.  Maybe I want to see if any updates on GitHub will conflict with my local repo's code.

Q3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

A3. A Fork is a copy that is made of a repository on GitHub, and this copy is also located on GitHub.  Cloning is making a copy of a repository, I can clone a repository on GitHub to my local machine, or also clone one of my local repositories and give it a different name.  A branch is like an "offshoot" of the master in my repository, I can use it to add a new feature, to experiment, or to create a foreign language version.

Q4. What is the benefit of having a copy of the last known state of the remote stored locally?

A4. The benefit is that we know what is going on with the remote, and could compare this with our local master and merge the code if we want.

Q5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

A5. I guess without Git or GitHub we would have to save to a common place on a server or use email.  I don't think anything would be easier, I think it would be harder to track changes and to merge them.

Q6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

A6. You would want to make changes in a separate branch rather than master when introducing new features or working in a team.  Working in branch has the benefit of keeping things separate and keeping master clean.  Working directly in master makes things less complicated, and might work for a solo developer on a small project.
